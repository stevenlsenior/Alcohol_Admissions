{
    "contents" : "# load packages\nlibrary(shiny); library(maptools); library(classInt); \nlibrary(RColorBrewer); library(ggplot2)\n\n# load data & maps\nd <- read.csv(\"alcohol_related_admissions.csv\", stringsAsFactors = FALSE)\nm <- readShapePoly(\"England_lad_2011_gen_clipped\")\n\n# convert name and ONS codes to character for easier matching\nm$CODE <- as.character(m$CODE)\nm$NAME <- as.character(m$NAME)\n\n# create variables for admissions data in map file\nm$ALL <- numeric(length(m$CODE))\nm$MALE <- numeric(length(m$CODE))\nm$FEMALE <- numeric(length(m$CODE))\n\n# Set colours for plotting using quintiles\ncols <- rev(brewer.pal(5, \"RdYlGn\"))\n\n# loop over LA entries in mapfile, match to data by ONS code\nfor(i in 1:length(m$CODE)){\n\tm$ALL[i] <- d$admissions_per_100000[d$ons_code == m$CODE[i]]\n\tm$FEMALE[i] <- d$admissions_per_100000_females[d$ons_code == m$CODE[i]]\n\tm$MALE[i] <- d$admissions_per_100000_males[d$ons_code == m$CODE[i]]\n}\n\nshinyServer(function(input, output) {\n\t\n\toutput$myPlot <- renderPlot({\n\t\tla <<- input$la\n\t\tgender <<- input$gender\n\t\t\n\t\t## Set variables for plotting, use global assignment to enable ggplot later\n\t\tif(gender == \"both\") {\n\t\t\tla_val <<- d$admissions_per_100000[d$local_authority == la]\n\t\t\tadmissions <<- d$admissions_per_100000\n\t\t}\n\t\telse if(gender == \"male\") {\n\t\t\tla_val <<- d$admissions_per_100000_males[d$local_authority == la]\n\t\t\tadmissions <<- d$admissions_per_100000_males\n\t\t}\n\t\telse if(gender == \"female\") {\n\t\t\tla_val <<- d$admissions_per_100000_females[d$local_authority == la]\n\t\t\tadmissions <<- d$admissions_per_100000_females\n\t\t}\n\t\t\t\t\n\t\t# Set line colour on quintile\n\t\tbreaks <- classIntervals(admissions, n=5, style=\"quantile\")\n\t\tline_col <- cols[findInterval(la_val, breaks$brks)]\n\t\t\n\t\t# Make plot\n\t\tdd <- with(density(admissions), data.frame(x,y))\n\t\tg <- ggplot(dd, aes(x = x, y = y))\n\t\tp <- g + geom_line(color = \"black\")  +\n\t\t\tlayer(data = dd, mapping = aes(x = ifelse(x < la_val, x, la_val), y = y), \n\t\t\t\tgeom = \"area\", \n\t\t\t\tgeom_params = list(fill = line_col)) +\n\t\t\tscale_y_continuous(limits = c(0,max(dd$y)), name=\"Density\") +\n\t\t\tgeom_vline(aes(xintercept = la_val), color = line_col, linetype=\"dashed\") +\n\t\t\tscale_x_continuous(name = \"Alcohol-related admissions per 100,000 population\") + \n\t\t\ttheme_classic()\n\t\tprint(p)\n\t\t\n\t})\n\t\n\toutput$myMap <- renderPlot({\n\t\t\tbreaks <- classIntervals(m$ALL, n = 5, style = \"quantile\")\n\t\t\tpar(mar = rep(0, 4))\n\t\t\tplot(m, col = cols[findInterval(m$ALL, breaks$brks)])\n\t})\n\t\n\toutput$Text1 <- renderText(input$la)\n\toutput$Text2 <- renderText({\n\t\tif(input$gender == \"both\") {\n\t\t\td$admissions_per_100000[d$local_authority == input$la]\n\t\t}\n\t\telse if(input$gender == \"male\") {\n\t\t\td$admissions_per_100000_males[d$local_authority == input$la]\n\t\t}\n\t\telse if(input$gender == \"female\") {\n\t\t\td$admissions_per_100000_females[d$local_authority == input$la]\n\t\t}\n\t})\n\toutput$Text3 <- renderText({\n\t\tif(input$gender == \"both\") {\n\t\t\tla_val <- d$admissions_per_100000[d$local_authority == input$la]\n\t\t\tadmissions <- d$admissions_per_100000\n\t\t}\n\t\telse if(input$gender == \"male\") {\n\t\t\tla_val <- d$admissions_per_100000_males[d$local_authority == input$la]\n\t\t\tadmissions <- d$admissions_per_100000_males\n\t\t}\n\t\telse if(input$gender == \"female\") {\n\t\t\tla_val <- d$admissions_per_100000_females[d$local_authority == input$la]\n\t\t\tadmissions <- d$admissions_per_100000_females\n\t\t}\n\t\t\n\t\tworse <- round(sum(la_val > admissions)*100/length(admissions), digits = 2)\n\t\tpaste(as.character(worse), \"%\", sep = \"\")\n\t})\n})",
    "created" : 1428160388514.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2752568215",
    "id" : "1B809481",
    "lastKnownWriteTime" : 1428232869,
    "path" : "~/Documents/R Projects/Alcohol_admissions/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}